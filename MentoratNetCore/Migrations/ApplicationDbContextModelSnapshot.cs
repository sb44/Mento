// <auto-generated />
using System;
using MentoratNetCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MentoratNetCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MentoratNetCore.Models.ApplicationCategorieUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("AspNetCategorieUser");
                });

            modelBuilder.Entity("MentoratNetCore.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("IdCategorieUtilisateur");

                    b.Property<string>("IdParent");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NomLong");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IdCategorieUtilisateur");

                    b.HasIndex("IdParent");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MentoratNetCore.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("ActifUser");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("IdCategorieUtilisateur");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NomUser");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PrenomUser");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("IdCategorieUtilisateur");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MentoratNetCore.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("MentoratNetCore.Models.Expert", b =>
                {
                    b.Property<int>("No_Expert")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nom_Expert")
                        .HasMaxLength(255);

                    b.HasKey("No_Expert");

                    b.ToTable("Experts");
                });

            modelBuilder.Entity("MentoratNetCore.Models.Expertise", b =>
                {
                    b.Property<int>("No_Expertise")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("No_Regroupement_Expertise");

                    b.Property<string>("Nom_Expertise")
                        .HasMaxLength(255);

                    b.HasKey("No_Expertise");

                    b.ToTable("Expertises");
                });

            modelBuilder.Entity("MentoratNetCore.Models.Intervention", b =>
                {
                    b.Property<string>("No_Intervention")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("Date_Intervention");

                    b.Property<string>("Description_Intervention")
                        .HasMaxLength(500);

                    b.Property<int?>("Duree_Intervention");

                    b.Property<string>("No_Mentor_Intervention")
                        .HasMaxLength(128);

                    b.Property<string>("No_Mentore_Intervention")
                        .HasMaxLength(128);

                    b.HasKey("No_Intervention");

                    b.HasIndex("No_Mentor_Intervention");

                    b.HasIndex("No_Mentore_Intervention");

                    b.ToTable("Interventions");
                });

            modelBuilder.Entity("MentoratNetCore.Models.Mentor", b =>
                {
                    b.Property<string>("NoMentor")
                        .HasColumnName("No_Mentor")
                        .HasMaxLength(128);

                    b.Property<string>("CourrielMentor")
                        .IsRequired()
                        .HasColumnName("Courriel_Mentor")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateConnexionMentor")
                        .HasColumnName("DateConnexion_Mentor");

                    b.Property<string>("NoTpsMentor")
                        .HasColumnName("NoTPS_Mentor")
                        .HasMaxLength(255);

                    b.Property<string>("NoTvqMentor")
                        .HasColumnName("NoTVQ_Mentor")
                        .HasMaxLength(255);

                    b.Property<string>("NomMentor")
                        .HasColumnName("Nom_Mentor")
                        .HasMaxLength(255);

                    b.Property<string>("PrenomMentor")
                        .HasColumnName("Prenom_Mentor")
                        .HasMaxLength(255);

                    b.Property<bool>("TaxeMentor")
                        .HasColumnName("Taxe_Mentor");

                    b.HasKey("NoMentor");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("MentoratNetCore.Models.MentoratCategorie", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.ToTable("MentoratCategorie");
                });

            modelBuilder.Entity("MentoratNetCore.Models.MentoratCategorieMentors", b =>
                {
                    b.Property<string>("NoMentor")
                        .HasColumnName("No_Mentor");

                    b.Property<int>("MentoratCategorieId");

                    b.HasKey("NoMentor", "MentoratCategorieId");

                    b.HasIndex("MentoratCategorieId");

                    b.ToTable("MentoratCategorieMentors");
                });

            modelBuilder.Entity("MentoratNetCore.Models.MentoratInscription", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<bool>("APaye");

                    b.Property<int>("Annee");

                    b.Property<DateTime>("DateDebut");

                    b.Property<DateTime>("DateFin");

                    b.Property<DateTime>("DateInscription");

                    b.Property<string>("MentorNoMentor");

                    b.Property<int?>("MentoratCategorieId");

                    b.Property<string>("MentoreNo_Mentore");

                    b.HasKey("Id");

                    b.HasIndex("MentorNoMentor");

                    b.HasIndex("MentoratCategorieId");

                    b.HasIndex("MentoreNo_Mentore");

                    b.ToTable("MentoratInscription");
                });

            modelBuilder.Entity("MentoratNetCore.Models.Mentore", b =>
                {
                    b.Property<string>("No_Mentore")
                        .HasMaxLength(128);

                    b.Property<string>("Cellulaire_Mentore")
                        .HasMaxLength(15);

                    b.Property<string>("Courriel_Mentore")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DateInscription_Mentore");

                    b.Property<int?>("MentoratCategorieId");

                    b.Property<string>("MotPasse_Mentore")
                        .HasMaxLength(255);

                    b.Property<int?>("No_Expert_Mentore");

                    b.Property<string>("No_Mentor_Mentore")
                        .HasMaxLength(128);

                    b.Property<string>("Nom_Mentore")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Objectifs_Mentore")
                        .HasColumnType("ntext")
                        .HasMaxLength(1000);

                    b.Property<string>("Organisme_Mentore")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Paye_Mentore");

                    b.Property<string>("Prenom_Mentore")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Telephone_Mentore")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<byte[]>("upsize_ts")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasMaxLength(8);

                    b.HasKey("No_Mentore");

                    b.HasIndex("MentoratCategorieId");

                    b.HasIndex("No_Mentor_Mentore");

                    b.ToTable("Mentores");
                });

            modelBuilder.Entity("MentoratNetCore.Models.MentoresExpertises", b =>
                {
                    b.Property<int>("No_Expertise");

                    b.Property<string>("No_Mentore");

                    b.HasKey("No_Expertise", "No_Mentore");

                    b.HasIndex("No_Mentore");

                    b.ToTable("MentoresExpertises");
                });

            modelBuilder.Entity("MentoratNetCore.Models.PlanAction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Actions");

                    b.Property<string>("Echeancier");

                    b.Property<string>("Evaluation");

                    b.Property<string>("Indicateurs");

                    b.Property<string>("InscriptionId")
                        .IsRequired();

                    b.Property<string>("Objectifs");

                    b.Property<int>("Ordre");

                    b.HasKey("Id");

                    b.HasIndex("InscriptionId");

                    b.ToTable("PlanAction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MentoratNetCore.Models.ApplicationRole", b =>
                {
                    b.HasOne("MentoratNetCore.Models.ApplicationCategorieUser", "CategorieUtilisateur")
                        .WithMany()
                        .HasForeignKey("IdCategorieUtilisateur");

                    b.HasOne("MentoratNetCore.Models.ApplicationRole", "RoleParent")
                        .WithMany("RolesEnfants")
                        .HasForeignKey("IdParent");
                });

            modelBuilder.Entity("MentoratNetCore.Models.ApplicationUser", b =>
                {
                    b.HasOne("MentoratNetCore.Models.ApplicationCategorieUser", "CategorieUtilisateur")
                        .WithMany("LstUtilisateurs")
                        .HasForeignKey("IdCategorieUtilisateur");
                });

            modelBuilder.Entity("MentoratNetCore.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("MentoratNetCore.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MentoratNetCore.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MentoratNetCore.Models.Intervention", b =>
                {
                    b.HasOne("MentoratNetCore.Models.Mentor", "Mentor")
                        .WithMany("Interventions")
                        .HasForeignKey("No_Mentor_Intervention");

                    b.HasOne("MentoratNetCore.Models.Mentore", "Mentore")
                        .WithMany("Interventions")
                        .HasForeignKey("No_Mentore_Intervention");
                });

            modelBuilder.Entity("MentoratNetCore.Models.MentoratCategorieMentors", b =>
                {
                    b.HasOne("MentoratNetCore.Models.MentoratCategorie", "MentoratCategorie")
                        .WithMany()
                        .HasForeignKey("MentoratCategorieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MentoratNetCore.Models.Mentor", "Mentor")
                        .WithMany("MentoratCategorieMentors")
                        .HasForeignKey("NoMentor")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MentoratNetCore.Models.MentoratInscription", b =>
                {
                    b.HasOne("MentoratNetCore.Models.Mentor", "Mentor")
                        .WithMany("MentoratInscriptions")
                        .HasForeignKey("MentorNoMentor");

                    b.HasOne("MentoratNetCore.Models.MentoratCategorie", "MentoratCategorie")
                        .WithMany()
                        .HasForeignKey("MentoratCategorieId");

                    b.HasOne("MentoratNetCore.Models.Mentore", "Mentore")
                        .WithMany("Inscriptions")
                        .HasForeignKey("MentoreNo_Mentore");
                });

            modelBuilder.Entity("MentoratNetCore.Models.Mentore", b =>
                {
                    b.HasOne("MentoratNetCore.Models.MentoratCategorie")
                        .WithMany("Mentores")
                        .HasForeignKey("MentoratCategorieId");

                    b.HasOne("MentoratNetCore.Models.Mentor", "MentorMentore")
                        .WithMany()
                        .HasForeignKey("No_Mentor_Mentore");
                });

            modelBuilder.Entity("MentoratNetCore.Models.MentoresExpertises", b =>
                {
                    b.HasOne("MentoratNetCore.Models.Expertise", "Expertise")
                        .WithMany("MentoresExpertises")
                        .HasForeignKey("No_Expertise")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MentoratNetCore.Models.Mentore", "Mentore")
                        .WithMany("MentoresExpertises")
                        .HasForeignKey("No_Mentore")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MentoratNetCore.Models.PlanAction", b =>
                {
                    b.HasOne("MentoratNetCore.Models.MentoratInscription", "Inscription")
                        .WithMany()
                        .HasForeignKey("InscriptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MentoratNetCore.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MentoratNetCore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MentoratNetCore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MentoratNetCore.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
