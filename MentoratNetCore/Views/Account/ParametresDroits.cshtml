@model MentoratNetCore.Models.ParametresDroitsViewModel
@using MentoratNetCore.Extensions


@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewBag.Title = "Utilisateurs";
    Layout = "~/Views/Shared/_Layout.cshtml";

    /* SB 2018-07-18 
     * Snippet pour déterminé si l'appareil est mobile
     * Adapté de : https://stackoverflow.com/questions/49833925/request-browser-ismobiledevice-equivalent-in-asp-net-core-2-0
    */
    bool estAppareilMobile = false;
    Regex MobileCheck = new Regex(@"(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino", RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.Compiled);
    Regex MobileVersionCheck = new Regex(@"1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-", RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.Compiled);

    var u = HttpContextAccessor.HttpContext.Request.Headers["HTTP_USER_AGENT"].ToString();

    if (u.Length >= 4)
    {
        if (MobileCheck.IsMatch(u) || MobileVersionCheck.IsMatch(u.Substring(0, 4)))
        {
            estAppareilMobile = true;
        }
    }
    //Fin Snippet pour déterminé si l'appareil est mobile


}

<h2>Modifier les droits du site Mentorat</h2>

<div class="divGridPDroits">
    @(Html.Kendo().Grid<MentoratNetCore.Models.ParametresDroitsViewModel>()
                      .Name("gridDroits")
                      .Selectable(selectable => selectable.Mode(GridSelectionMode.Single).Type(GridSelectionType.Row))
                      .Columns(columns =>
                      {
                          columns.Bound(c => c.Id).Title("Id").Hidden();
                          columns.Bound(c => c.NomLong).Title("Nom").Filterable(filtre => filtre.Extra(false).Operators(operateur => operateur.ForString(str => str.Clear().Contains("Contient"))));
                      })
                      .Events(events => events.Change("onChangeGridDroits"))
                      .Scrollable(scroll => scroll.Virtual(true))
                      .Sortable()
                      .Filterable()
                      .Events(events => events.DataBound("onDataboundGridDroits"))
                        .ToolBar(toolbar =>
                        {
                            if (User.Identity.IsAuthenticated && User.IsInRole("CreerDroit"))
                            {
                                toolbar.Custom().Name("AjouterDroit").Text("Ajouter").HtmlAttributes(new { id = "AjouterDroit" });
                            }
                        })

                      .DataSource(dataSource => dataSource
                         .Ajax()
                          .Model(model => model.Id(p => p.Id))
                          .Sort(sort => sort.Add("NomLong").Ascending())
                          .Read(read => read.Action("ParametresDroits_Read", "Account"))
                      )
    )

</div>
<div class="divPDroitsPanel">
    @using (Html.BeginForm("ParametresDroits", "Account", FormMethod.Post, new { id = "FormParametresDroits" }))
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary()

        @Html.HiddenFor(m => m.Id, new { data_bind = "value:Id" })
        @Html.HiddenFor(m => m.NomHidden, new { id = "NomHidden", data_bind = "value:NomHidden" })

        @Html.ValidationMessageFor(m => m.Id)
        if (User.Identity.IsAuthenticated && User.IsInRole("CreerDroit"))
        {
            <ul id="fieldlist">
                <li>
                    @Html.LabelFor(m => m.Nom)
                    @Html.Kendo().TextBoxFor(m => m.Nom).HtmlAttributes(new { data_bind = "value:Nom" })
                    @Html.ValidationMessageFor(m => m.Nom)
                </li>
                <li>
                    @Html.LabelFor(m => m.NomLong)
                    @Html.Kendo().TextBoxFor(m => m.NomLong).HtmlAttributes(new { data_bind = "value:NomLong" })
                    @Html.ValidationMessageFor(m => m.NomLong)
                </li>
                <li>
                    @Html.LabelFor(m => m.IdCategorie)
                    @(Html.Kendo().DropDownListFor(model => model.IdCategorie)
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("ObtenirCategorieUtisateur", "Account");
                                }).ServerFiltering(false);
                            })
                            .DataTextField("nomCat")
                            .DataValueField("noCat")
                            .HtmlAttributes(new { style = "width:320px; padding-bottom:.5em;", data_bind = "value:IdCategorie" })
                    )
                    @Html.ValidationMessageFor(m => m.IdCategorie)
                </li>
                <li>
                    @Html.LabelFor(m => m.IdParent)
                    @(Html.Kendo().DropDownListFor(model => model.IdParent)
                            //.Name("IdParent")
                            .DataSource(source =>
                            {
                                source.Read(read =>
                                {
                                    read.Action("ParametresDroitsRoles_Read", "Account");
                                }).ServerFiltering(false);
                            })
                            .DataTextField("NomLong")
                            .DataValueField("Id")
                            .OptionLabel("Aucun")
                            .HtmlAttributes(new { style = "width:320px; padding-bottom:.5em;", data_bind = "value:IdParent" })
                    )
                    @Html.ValidationMessageFor(m => m.IdParent)
                </li>
                <li class="actions">
                    @(Html.Kendo().Button()
                                .Name("btnSubmit")
                                .HtmlAttributes(new { type = "button", @class = "k-primary" })
                                .Content("Enregistrer les modifications")
                    )
                    @if (User.Identity.IsAuthenticated && User.IsInRole("CreerDroit"))
                    {
                        <div class="k-edit-buttons k-state-default">
                            @(Html.Kendo().Button()
                                        .Name("btnAjouter")
                                        .Content("Ajouter")
                                        .HtmlAttributes(new { type = "button", @class = "k-primary" })
                            )
                            @(Html.Kendo().Button()
                                        .Name("btnAnnuler")
                                        .Content("Annuler")
                                        .HtmlAttributes(new { type = "button" })
                                        .Icon("cancel")
                            )
                        </div>

                    }

                </li>
            </ul>
            <hr class="hrDroits" />
        }

        <label id="lblUtilisateursDuDroit">Utilisateurs qui possèdent le droit</label>
        @(Html.Kendo().Grid<MentoratNetCore.Models.UtilisateursParametresDrtoisViewModel>()
                      .Name("gridUser")
                       .ToolBar(toolbar =>
                       {
                           toolbar.Custom().Name("AjouterUtilisateur").Text("Ajouter").HtmlAttributes(new { id = "AjouterUtilisateur" });
                           toolbar.Custom().Name("RetirerUtilisateur").Text("Retirer").HtmlAttributes(new { id = "RetirerUtilisateur" });
                       })
                      .Columns(columns =>
                      {
                  /**/
                @*columns.Template(@<text></text> )
                    .ClientTemplate("<text><input id='chkUtilisateur' type='checkbox' #= IsChk ? checked='checked' : '' # title='' /></text>")
                    .HeaderTemplate("<text><input id='selectAllChk' type='checkbox' title='' onclick='checkAll(this)' /></text>").Width(25);*@
                /**/
                        columns.Bound(c => c.NomComplet).Title("Utilisateurs").Filterable(filtre => filtre.Extra(false).Operators(operateur => operateur.ForString(str => str.Clear().Contains("Contient")))); ;
                        columns.Bound(c => c.StatutUser).Title("Statut");
                    }).Excel(excel => excel
                              .AllPages(true)
                              .Filterable(true))
                      .Scrollable(scroll => scroll.Virtual(true))
                      .Sortable()


                      .Selectable(select =>
                      {
                          if (estAppareilMobile)
                          {
                              select.Mode(GridSelectionMode.Single);
                          }
                          else
                          {
                              select.Mode(GridSelectionMode.Multiple);
                          }
                      })

                      .PersistSelection(true)
                      .Filterable()
                      .DataSource(dataSource => dataSource
                                  .Ajax()
                                  .Model(model => model.Id(p => p.Id))
                                  .Read(read => read.Action("UtilisateursParametresDroits_Read", "Account").Data("obtenirParametreGrid"))
                                 )
                      .Events(events => events.DataBound("onDataboundGridUser"))
        )

    }

</div>



@(Html.Kendo().Window()
     .Name("FenRechercheUtilisateurs")
     .Title("Rechercher des Utilisateurs")
     .Draggable()
     .Modal(true)
     .Visible(false)
     .Events(ev => ev.Close("onClose"))
)


@Html.Validation_Error_Convertion_Kendo_Template()

<script>

    var validator = $("#FormParametresDroits").kendoValidator().data("kendoValidator");

    function creerKendoValidator(pMesRules, pMesMessages) {
        var mesRules = new Object();
        var mesMessages = new Object();
        var container = $("#FormParametresDroits");
        //var str = "var ret = true;" +
        //            "if (input.is(\"[name=\'IdParent\']\"))" +
        //            "{" +
        //                "var drop = input.data('kendoDropDownList');" +
        //                "ret =  drop.value() != $('#Id').val();" +
        //             "}" +
        //             "return ret;";

        var str = "var ret = true;" +
        "if (input.is(\"[name=\'IdParent\']\"))" +
        "{" +
            "var drop = input.data('kendoDropDownList');" +
            "ret = (drop.value() ==  '') || (drop.value() !=  $('#Id').val());" +
         "}" +
         "return ret;";
        //var str = "var ret = true;" +
        //"if (input.is(\"[name=IdParent]\"))" +
        //"{" +
        //    "alert(\'yo\');ret=false;" +
        // "}" +
        // "return ret;";
        //alert(str);
        // "ret = $('#Id').val()=='' || drop.value() != $('#Id').val();" +
        mesRules["comparerRoleParent"] = new Function("input", str);
        mesMessages["comparerRoleParent"] = "Vous ne pouvez pas utiliser ce droit.";

        if (pMesRules != null && pMesMessages != null) {
            mesRules = $.extend(true, mesRules, pMesRules);
            mesMessages = $.extend(true, mesMessages, pMesMessages)
        }

        container.kendoValidator({
            rules: mesRules,
            messages: mesMessages
        });


    }


    $(document).ready(function () {

       var boolForm = @( (User.Identity.IsAuthenticated && User.IsInRole("CreerDroit"))? "true":"false");

        if (boolForm)
        {
              @Html.Validation_Error_Convertion_Kendo_Script("FormParametresDroits");

            creerKendoValidator(null, null);
        }
        else
        {
            var gridUser = $("#gridUser").data("kendoGrid");
            var gridDroits = $("#gridDroits").data("kendoGrid");

            gridUser.element.closest(".k-grid").css({ height: gridDroits.element.closest(".k-grid")[0].clientHeight-21 });
        }


        $("#AjouterDroit").kendoButton({
        icon: "plus"
        });

        $("#AjouterDroit").bind("click", function (e) {
            e.preventDefault();
               AfficherAjoutDroit(false);
          });

        $("#btnAnnuler").bind("click", function (e) {
            e.preventDefault();
            AfficherAjoutDroit(true);
            var grid = $("#gridDroits").data('kendoGrid')

            grid.dataSource.read();
        });

        function AfficherAjoutDroit(visible)
        {
                 if (!visible)
                 {
                     ViderChampsDroits();

                    $("#gridDroits").children(".k-grid-header, .k-grid-content").hide();
                    $("#gridUser").hide();

                    $("#lblUtilisateursDuDroit").hide();
                    $(".hrDroits").hide();
                    $("#btnSubmit").hide();



                    $("#btnSubmit").hide();
                    $("#btnAjouter").show();
                    $("#btnAnnuler").show();

                 }
                 else
                 {
                     $("#gridDroits").children(".k-grid-header, .k-grid-content").show();
                     $("#gridUser").show();

                     $("#lblUtilisateursDuDroit").show();
                     $(".hrDroits").show();
                     $("#btnSubmit").show();


                     $("#btnSubmit").show();
                     $("#btnAjouter").hide();
                     $("#btnAnnuler").hide();
                 }

        }


        $("#AjouterUtilisateur").kendoButton({
             icon: "plus"
        });

        $("#RetirerUtilisateur").kendoButton({
            icon: "minus"
        });


            $("#gridUser").find(".k-grid-toolbar").on("click", ".k-grid-AjouterUtilisateur", function (e) {
        e.preventDefault();
        if ($("#NomHidden").val() != null && $("#NomHidden").val() != "") {
            var fen = $("#FenRechercheUtilisateurs").data("kendoWindow");
            var button = $("#gridUser");
            //alert(fen.element.closest(".k-window").clientHeight);
            //console.log("fen", $("#FenRechercheUtilisateurs"));

            //alert($("#FenRechercheUtilisateurs").height());
            fen.refresh('@Url.Action("RechercherUtilisateurs", "SharedUtilisateurs")?nomParent=ParametresDroits&parentComplement=' + $("#NomHidden").val());

            fen.open()
            var y = button.position().top ;
            var x = button.position().left;
           // alert($("#FenRechercheUtilisateurs")["0"].clientHeight);

            fen.element.closest(".k-window").css({ top: y , left: x });

            console.log("fen", fen.element["0"].clientHeight);
        }
    });

        $("#gridUser").find(".k-grid-toolbar").on("click", ".k-grid-RetirerUtilisateur", function (e) {
            e.preventDefault();
            if ($("#NomHidden").val() != null && $("#NomHidden").val() != "")
            {
                StatutBoutonsParametresDroits(false);

                var grid = $("#gridUser").data("kendoGrid")

                var selectedItem = grid.select();

                if (selectedItem.length > 0) {
                    var tabUser = $.map(selectedItem, function (item) {
                        return grid.dataItem(item);
                    });

                    var toSend = JSON.stringify({ nomRole: $("#NomHidden").val(), userToRemove: tabUser });

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("UserToRoles_Remove", "Account")',
                        data: toSend,
                        dataType: "json",
                        contentType: 'application/json; charset=utf-8',
                        success: function (result) {
                            if (result.success) {
                                $("#gridUser").data("kendoGrid").dataSource.read();
                            }
                            else {
                                if (result.msg=="")
                                {
                                    alert("Aucun utilisateur retiré!");
                                    StatutBoutonsParametresDroits(true);
                                }
                            }

                            if(result.msg!="")
                            {
                                alert(result.msg);
                            }
                            StatutBoutonsParametresDroits(true);
                        }
                    });

                }
                else
                {
                    //aucun item
                    StatutBoutonsParametresDroits(true);
                }
            }
        });

        @*$("#AjouterUtilisateur").bind("click", function () {

                 if ($("#NomHidden").val() != null && $("#NomHidden").val() != "")
            {
                     var fen = $("#FenRechercheUtilisateurs").data("kendoWindow");
                     fen.refresh('@Url.Action("RechercherUtilisateurs", "SharedUtilisateurs")?nomParent=ParametresDroits&parentComplement=' + $("#NomHidden").val());
                     fen.open();
                 }

             });*@




        //$("#RetirerUtilisateur").bind("click", function (e) {
            //e.preventDefault();
            @*if ($("#NomHidden").val() != null && $("#NomHidden").val() != "")
            {
               StatutBoutonsParametresDroits(false);

                var grid = $("#gridUser").data("kendoGrid")

                var selectedItem = grid.select();

                if (selectedItem.length > 0) {
                    var tabUser = $.map(selectedItem, function (item) {
                        return grid.dataItem(item);
                    });

                    var toSend = JSON.stringify({ nomRole: $("#NomHidden").val(), userToRemove: tabUser });

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("UserToRoles_Remove", "Account")',
                        data: toSend,
                        dataType: "json",
                        contentType: 'application/json; charset=utf-8',
                        success: function (result) {
                            if (result.success) {
                               $("#gridUser").data("kendoGrid").dataSource.read();
                            }
                            else {
                                alert("Aucun utilisateur retiré!");
                            }

                        }
                    });

                }
            }*@


             //});

        $("#btnSubmit").click(function (e) {
            e.preventDefault();

            //alert($("#IdParent").data("kendoDropDownList").value());

            if ($("#NomHidden").val() != null && $("#NomHidden").val() != "")
            {
                //on retire la classe fictive pour permettre de valider à nouveau
                $("#btnSubmit").removeClass("error");
                StatutBoutonsParametresDroits(false);


                var validator = $("#FormParametresDroits").data("kendoValidator");

                var siValide = validator.validate();


                if (siValide) {
                    $("#FormParametresDroits").submit();
                }
                else {
                    StatutBoutonsParametresDroits(true);
                }
            }

             });


        $('#FormParametresDroits').on("submit", function (e) {
                 e.preventDefault();

            $.ajax({
                 url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {

                         if (result.length > 0)
                         {
                             var mesRules = new Object();
                             var mesMessages = new Object();

                        //on ajoute une classe fictive pour afficher les erreurs du serveur seulement quand la classe fictif est attachée au bouton enregistrer.
                        $("#btnSubmit").addClass("error");


                             for (var i = 0; i < result.length; i++)
                             {
                                 var maKey = result[i].Key + "";
                                 var monMessage = result[i].Message;
                                 var monInput = "[name=" + result[i].Key + "]";

                                 var functionEnString = "if (input.is(\'" + monInput + "\') && $('#btnSubmit').hasClass('error')) {return false;} return true;";

                                 mesRules[ maKey] = new Function("input", functionEnString);
                                 mesMessages[ maKey] = monMessage;
                             }

                             creerKendoValidator(mesRules, mesMessages);

                             var valide = $("#FormParametresDroits").data("kendoValidator");

                             valide.validate();

                         }
                         else
                         {

                            $("#gridDroits").data("kendoGrid").dataSource.read();
                         }

                         StatutBoutonsParametresDroits(true);

                     },
                error: function (resultat, statut, erreur) {
                         console.log("Resultat: " + resultat.responseText);
                         console.log("statut : " + statut);
                         console.log("Erreur: " + erreur);
                     }

                 });
        });


        $("#btnAjouter").click(function (e) {
            e.preventDefault();

            //on retire la classe fictive pour permettre de valider à nouveau
            $("#btnSubmit").removeClass("error");

            var validator = $("#FormParametresDroits").data("kendoValidator");

            var formValide = validator.validate();

            if (formValide) {
                AjouterNouveauRole();
            }
            else {
                // StatutBoutonsParametresDroits(true);
            }





        });

        function AfficherErreursRole(result) {
            if (result.length > 0) {
                var mesRules = new Object();
                var mesMessages = new Object();

                //on ajoute une classe fictive pour afficher les erreurs du serveur seulement quand la classe fictif est attachée au bouton enregistrer.
                $("#btnSubmit").addClass("error");


                for (var i = 0; i < result.length; i++) {
                    var maKey = result[i].Key + "";
                    var monMessage = result[i].Message;
                    var monInput = "[name=" + result[i].Key + "]";

                    var functionEnString = "if (input.is(" + monInput + ") && $('#btnSubmit').hasClass('error')) {return false;} return true;";

                    mesRules[maKey] = new Function("input", functionEnString);
                    mesMessages[maKey] = monMessage;
                }

                creerKendoValidator(mesRules, mesMessages);


                var valide = $("#FormParametresDroits").data("kendoValidator");

                valide.validate();


            }
            else
            {
                var btnAjouter = $("#btnAjouter");

                if (btnAjouter != null) {
                    AfficherAjoutDroit(true);
                }

                $("#gridDroits").data("kendoGrid").dataSource.read();
            }



            StatutBoutonsParametresDroits(true);
        }

        function AjouterNouveauRole() {

            $.ajax({
                url: '@Url.Action("ParametresDroits_Add", "Account")',
                type: "POST",
                data: $("#FormParametresDroits").serialize(),
                success: function (result) {
                    AfficherErreursRole(result);

                },
                error: function (resultat, statut, erreur) {
                    console.log("Resultat: " + resultat.responseText);
                    console.log("statut : " + statut);
                    console.log("Erreur: " + erreur);
                }

            });


        }


         });

    function showMessage( name, errors) {
        var validationMessageTmpl = kendo.template($("#message").html());

        //add the validation message to the form

        var cell = container.find("[data-valmsg-for=" + name + "]");

        if (cell.length) {
            cell.replaceWith(validationMessageTmpl({ field: name, message: errors, id: id }));
        }
        else {
            container.append(validationMessageTmpl({ field: name, message: errors, id: id }));
        }

    }

    @*$("#gridUser").find(".k-grid-toolbar").on("click", ".k-grid-AjouterUtilisateur", function (e) {
        e.preventDefault();
        if ($("#NomHidden").val() != null && $("#NomHidden").val() != "") {
            var fen = $("#FenRechercheUtilisateurs").data("kendoWindow");
            var button = $("#gridUser");
            //alert(fen.element.closest(".k-window").clientHeight);
            //console.log("fen", $("#FenRechercheUtilisateurs"));

            //alert($("#FenRechercheUtilisateurs").height());
            fen.refresh('@Url.Action("RechercherUtilisateurs", "SharedUtilisateurs")?nomParent=ParametresDroits&parentComplement=' + $("#NomHidden").val());

            fen.open()
            var y = button.position().top ;
            var x = button.position().left;
           // alert($("#FenRechercheUtilisateurs")["0"].clientHeight);

            fen.element.closest(".k-window").css({ top: y , left: x });

            console.log("fen", fen.element["0"].clientHeight);
        }
    });

        $("#gridUser").find(".k-grid-toolbar").on("click", ".k-grid-RetirerUtilisateur", function (e) {
            e.preventDefault();
            if ($("#NomHidden").val() != null && $("#NomHidden").val() != "")
            {
                StatutBoutonsParametresDroits(false);

                var grid = $("#gridUser").data("kendoGrid")

                var selectedItem = grid.select();

                if (selectedItem.length > 0) {
                    var tabUser = $.map(selectedItem, function (item) {
                        return grid.dataItem(item);
                    });

                    var toSend = JSON.stringify({ nomRole: $("#NomHidden").val(), userToRemove: tabUser });

                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("UserToRoles_Remove", "Account")',
                        data: toSend,
                        dataType: "json",
                        contentType: 'application/json; charset=utf-8',
                        success: function (result) {
                            if (result.success) {
                                $("#gridUser").data("kendoGrid").dataSource.read();
                            }
                            else {
                                if (result.msg=="")
                                {
                                    alert("Aucun utilisateur retiré!");
                                    StatutBoutonsParametresDroits(true);
                                }
                            }

                            if(result.msg!="")
                            {
                                alert(result.msg);
                            }
                            StatutBoutonsParametresDroits(true);
                        }
                    });

                }
                else
                {
                    //aucun item
                    StatutBoutonsParametresDroits(true);
                }
            }
        });*@


    function onDataboundGridDroits(e) {

        var grid = $("#gridDroits").data('kendoGrid')

        if (grid.dataSource.view().length > 0)
        {
            //Aucune donnée
            if ($("#Id").val() != null && $("#Id").val() != "") {
                grid.items().each(function () {
                    var data = grid.dataItem(this);

                    if (data.Id == $("#Id").val()) {
                        grid.select(this);
                    }

                });
            }
            else {
                setTimeout(function () {

                    var row = e.sender.tbody.find('tr:first');

                    grid.select(row);

                }, 50)

            }
        }
        else
        {
            ViderChampsDroits();

        }

    }

    function onChangeGridDroits(e) {

        StatutBoutonsParametresDroits(false);
        var selectedRow = e.sender.select();
        var item =  e.sender.dataItem(selectedRow)

        kendo.bind($("#FormParametresDroits"), item.toJSON());

        var validator = $("#FormParametresDroits").data("kendoValidator");

        //if(validator!= null){
        validator.hideMessages();

        $("#btnSubmit").removeClass("error");

        var gridUser = $("#gridUser").data("kendoGrid");

        if (gridUser!=null)
        {
            if(gridUser.select().length>0)
            {
                gridUser.clearSelection();
            }

            gridUser.dataSource.read();

        }



    }


    function onDataboundGridUser(e)
    {
        StatutBoutonsParametresDroits(true);
    }


    function obtenirParametreGrid()
    {
        return {nomRole: $("#NomHidden").val()};
    }

    function StatutBoutonsParametresDroits(boolActive) {

        $("#AjouterUtilisateur").attr("disabled", !boolActive);
        $("#RetirerUtilisateur").attr("disabled", !boolActive);
        $("#btnSubmit").attr("disabled", !boolActive);
        $("#btnAnnuler").attr("disabled", !boolActive);
        $("#gridDroits").attr("disabled", !boolActive);
        $("#gridUser").attr("disabled", !boolActive);

    }

    function onClose(e)
    {
        if (varCloseRechercherUtilisateursInfo == "save" && e.userTriggered ==false)
        {
            StatutBoutonsParametresDroits(false);

            var grid = $("#gridRechercherUtilisateurs").data("kendoGrid");
            var selectedItem = grid.select();


            if(selectedItem.length > 0)
            {
                //creer le tableau de retour avec les lignes sélectionnées
                var tabUser = $.map(selectedItem, function (item)
                {
                    return grid.dataItem(item);
                });

                var toSend = JSON.stringify({ nomRole: $("#NomHidden").val(), userToAdd: tabUser });

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("UserToRoles_Add", "Account")',
                    data: toSend,
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    success: function(result)
                    {
                        if(result.success)
                        {
                            $("#gridUser").data("kendoGrid").dataSource.read();
                        }
                        else
                        {
                            alert("Aucun utilisateur ajouté!");
                            StatutBoutonsParametresDroits(true);
                        }
                    }
                });
            }
            else
            {
                //selection vide
                StatutBoutonsParametresDroits(true);
            }
        }

    }

    function ViderChampsDroits() {
        $("#btnSubmit").removeClass("error");
        $("#Id").val("");
        $("#NomHidden").val("");

        $("#Nom").val("");
        $("#NomLong").val("");

        $("#IdParent").data("kendoDropDownList").select("");
        $("#IdCategorie").data("kendoDropDownList").select("Utilisateur");

        $("#gridUser").data("kendoGrid").dataSource.data([]);
    }

</script>



<style>

    body {
        height: 83vh;
    }

    #fieldlist {
        margin: 0;
        padding: 0;
    }

        #fieldlist li {
            list-style: none;
            padding-bottom: .7em;
        }

        #fieldlist label {
            display: block;
            padding-bottom: .3em;
            font-weight: bold;
            text-transform: uppercase;
            font-size: 12px;
            color: #444;
        }

        #fieldlist input {
            width: 292px;
            max-width: 98%;
        }

    span.k-tooltip {
        margin-top: 5px;
        line-height: 1.7em;
        width: 100%;
        box-sizing: border-box;
        text-align: left;
    }

    #btnSubmit {
        padding-left: 20px;
        padding-right: 20px;
    }

    #btnAjouter {
        display: none;
        /*padding-right:20px;
        padding-left:20px;
        margin-right:10px;*/
        width: 100px;
    }

    #btnAnnuler {
        display: none;
        /*padding-left:20px;
        padding-right:20px;*/
        width: 100px;
    }

    hr.hrDroits {
        width: 400px;
        border-color: #a3d0e4;
        margin-left: 0px;
        text-align: left;
        max-width: 90vw;
    }

    div.divGridPDroits {
        display: inline-block;
        padding: 1em 1em 2em 0em;
        vertical-align: top;
        height: 618px;
        min-width: 250px;
        width: 25%;
        margin-right: 0px;
        border-right: 0px;
    }

    div.divPDroitsPanel {
        display: inline-block;
        padding: 1em 0em;
        height: 599px;
        min-width: 250px;
        width: 60%;
    }

    .k-grid {
        max-width: 400px;
        height: 100%;
    }

    .k-grid-content {
        max-height: 100%;
    }

    div.k-window {
        /*top:50% !important;
       left:50% !important;*/
        transform: translate(-50%,-50%) !important;
    }

    .k-invalid-msg {
        max-width: 300px;
    }

    @@media only screen and (max-width: 750px) {
        #gridDroits {
            max-width: 90%;
            height: 100%;
            margin-left: 0px;
        }

        #gridUser {
            max-width: 90%;
            height: 100%;
            margin-left: 0px;
        }
        /*.k-grid{
            /*max-width:90%;*/
        /* height:400px !important;
            max-height:400px !important;*/
        /*height:50vh;*/
        /*  }*/
        /*.k-grid-content {
            max-width:100%;
            /*height:400px;

            max-height:400px !important;*/
        /*  }*/
        div.divGridPDroits {
            width: auto;
            padding-right: 0em;
            margin: 0px;
            height: 35%;
        }

        div.divPDroitsPanel {
            width: auto;
            padding-right: 0em;
            margin: 0px;
            height: 35%;
        }
        /*div.divPDroitsPanel{
                     width:auto;
                        /*height:auto;*/
        /* }*/
        div.k-window {
            transform: translate(-0px,-0px) !important;
        }

        span.k-input {
            max-width: 90vw;
        }

        .k-dropdown {
            max-width: 90vw;
        }
    }
</style>